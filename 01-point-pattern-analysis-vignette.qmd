---
title: "Point Pattern Analysis Vignette"
author: "Martin Emons, Samuel Gunz, Mark D. Robinson"
format: html
editor: visual
---

## Introduction

### Overview of technologies

### Point Process

## Point Pattern Analysis

### `spatstat` package and `ppp` object

The central package to analyse point patterns in `R` is called `spatstat` [@baddeleySpatstatPackageAnalyzing2005]. The main data object to compute on is 
called `ppp` object. `ppp` objects describe point patterns in two dimensional
space, `ppx` objects create multidimensional point patterns. A `ppp` object is
is made up of three specifications [@baddeleySpatstatPackageAnalyzing2005]:

- The locations of the points in question (x,y and, optionally, z coordinates)
- The observation window
- The associated marks to each point in the pattern

On this central object from `spatstat` metrics can be calculated. 

```{r}
#| label: load-data
#source some helper functions
source('utils.R')
#load the SpatialExperiment object
spe <- readRDS("data/spe.rds")
spe
```

We see that we have an object of class `SpatialExperiment` with $161$ genes (rows)
and $73655$ cells. This object is very similar to a `SingleCellExperiment` object
except it has the added `spatialCoords` slot. One slot in the `colData` is called
`sample_id` which defines the so called z-slices. The three dimensional tissue
is cut in the z-axis into consecutive two dimensional slices. 

Next, we want to extract three slices of this `SpatialExperiment` object and
convert the 2D slices into `ppp` objects.

```{r}
#define the Z-stacks that you want to compare
zstack_list <- list("-0.09", "0.01", "0.21")
#small helper function to extract the z-slices and convert them to `ppp` objects
selectZstacks <- function(zstack, spe){
  sub <- spe[, spe$sample_id == zstack]
  pp <- .ppp(sub, marks = "cluster_id")
  return(pp)
}
pp_ls <- lapply(zstack_list, selectZstacks, spe)
names(pp_ls) <- zstack_list

pp_ls
```

We see that we obtain a list of three `ppp` objects for the three z-slices
$-0.09, 0.01, 0.21$. 

We can plot one of these slices, e.g. slice $-0.09$ with ggplot

```{r}
#create a dataframe from the point pattern
pp_df <- pp_ls[[1]] %>% as.data.frame()
#plot with ggplot
ggplot(pp_df, aes(x,y,colour = marks)) +
  geom_point() +
  theme_light()
```

### Windows

As stated above, one important aspect of a point pattern is the observation window. In most microscopy use cases we encounter window sampling. Window sampling describes the case where we don't observe the entire point pattern in a window but just a sample [@baddeleySpatialPointPatterns2015, pp. 143-145].

The window of a point pattern does not have to be quadratic, we can receive round biopsies or calculate convex hulls around our sample [@baddeleySpatialPointPatterns2015, pp. 143-145]. 

Let's investigate the observation window a bit for the slice $-0.09$.

```{r}
#subset point pattern list
pp_sub <- pp_ls[['-0.09']]
#base R plot of all marks
pp_sub |> plot()
```

Here, we have a quadratic window around all points. 

Let's investigate what a round window would look like:

```{r}
pp_sub_round <- pp_sub
#calculate circle with radius 850 Âµm and a center at the centroid of the window would look like
w <- disc(r = 850, centroid.owin(Window(pp_sub)))
Window(pp_sub_round) <- w
pp_sub_round |> plot()
```

Correctly assigning windows is very important. The window should represent the space where points are expected. This means, in window sampling one should not restrict the window. This would lead to a false underestimation of the area where the points can be potentially observed. This problem of where we can observe points and where not (beyond the boundary of the window) leads to a range of problems collectivley called edge effects [@baddeleySpatialPointPatterns2015, pp. 143-145]. We will discuss them later.

### Marks

The next point that defines a point pattern is the marks associated with the points. The points can have as well no marks which we call an unmarked point pattern

```{r}
unmark(pp_sub) |> plot()
```

Marks can be univariate or multivariate variables that are associated with the points [@baddeleySpatialPointPatterns2015, pp. 147, pp. 563]. In the context of cell biology we can distinguish between discrete marks (e.g. cell types) or continuous marks (e.g. gene expression).

#### Discrete Marks

In our example we have a multitype point pattern, meaning there are different cell types that serve as marks for the point pattern. Multitype means that we consider all marks together. The opposite is multivariate, where we consider the marks independently [@baddeleySpatialPointPatterns2015, pp. 565 ff.]. 

First the multitype case:

```{r}
pp_sub |> plot()
```

Then splitting the point pattern and plotting a multivariate view on the same pattern.

```{r, fig.height=7, fig.width=7}
pp_sub |> split() |> plot()
```

#### Continuous Marks

Marks can as well be continuous as in the case of gene expression. We choose some genes from the original paper and look at their distribution [@baddeleySpatialPointPatterns2015 pp. 637] [@moffittMolecularSpatialFunctional2018]. 

```{r}
#subset the original SpatialExperiment to our example slide -0.09
sub <- spe[, spe$sample_id == '-0.09']
#  Genes from Fig. 6 of Moffitt et al. (2018)
genes <- c('Slc18a2', 'Esr1', 'Pgr')
gex <- assay(sub)[genes,] %>% t %>% as.matrix %>% 
  data.frame %>% set_rownames(NULL)
# gene expression to marks [ME: is it really expression?]
marks(pp_sub) <- gex
```

Now that we points with multivariate continuous marks

```{r, fig.height=7, fig.width=10}
#create a dataframe in long format for plotting
pp_df <- pp_sub %>% as.data.frame() %>% pivot_longer(cols = 3:5)

#add a 1 to all values, since log(0) is not defined - standard sc approach
pp_df$value <- pp_df$value + 1

ggplot(pp_df, aes(x,y,colour = value))+
  geom_point() + 
  facet_wrap(~name) +
  theme_light() + 
  coord_equal() +
  scale_color_continuous(type = "viridis", trans = 'log')
```

We note that the distribution of expression of the genes `Pgr` and `Slc18a2` is very evenly distributed with some elevations in the middle of the structure. `Esr1` shows a half-circle like structure in expression. Note that the expression is here logged counts plus one (to avoid problems with log of zero). 

#### Within Mark Comparison

We can compare patterns between marks of the same type. This is referred to as a within mark comparison in our vignette. We can compare discrete marks, so the distribution of one single mark, e.g. a cell type. 

```{r, fig.height=7, fig.width=10}
#create a dataframe from the point pattern
pp_df <- lapply(zstack_list, function(x){
   df <- pp_ls[[x]] %>% as.data.frame()
   df$stack <- x
   return(df)
})%>% bind_rows()

#select OD Mature cells
pp_df_odmature <- pp_df[pp_df$marks == 'OD Mature',]

ggplot(pp_df_odmature, aes(x,y, colour = marks)) + 
  geom_point() +
  theme_light() +
  facet_wrap(~stack,scales="free")+
  theme(aspect.ratio = 1)
```

Here, we plot the distribution of mature oligodendrocytes across three slices of one 3D brain sample. 

Continuous marks can be compared as well, e.g. the expression of a gene across slices of a tissue

```{r, fig.height=7, fig.width=10}
pp_df <- lapply(zstack_list, function(x){
    #subset the original SpatialExperiment to our example slide -0.09
    sub <- spe[, spe$sample_id == x]
    #  Genes from Fig. 6 of Moffitt et al. (2018)
    genes <- c('Slc18a2', 'Esr1', 'Pgr')
    gex <- assay(sub)[genes,] %>% t %>% as.matrix %>% 
  data.frame %>% set_rownames(NULL) 
    # gene expression to marks [ME: is it really expression?]
    marks(pp_ls[[x]]) <- gex
    df <- pp_ls[[x]] %>% as.data.frame()
    df$stack <- x
    return(df)
})%>% bind_rows()

pp_df$Esr1 <- pp_df$Esr1 + 1

ggplot(pp_df, aes(x,y, colour = Esr1)) + 
  geom_point() +
  theme_light() +
  facet_wrap(~stack,scales="free") +
  theme(aspect.ratio = 1) +
  scale_color_continuous(type = "viridis", trans = 'log')
```

We note that the gene `Esr1` is differently distributed across the slices of the 3D sample. 

#### Cross Mark Comparison

### Correlation

#### Global Measures

#### Local Measures

### Spacing

### Border Corrections

## Summary and Considerations
